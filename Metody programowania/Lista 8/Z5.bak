#lang plait

(define-type Op2
  (op-add) (op-mul) (op-sub) (op-div) (op-pot))

(define-type Op1
  (op-sil) (op-prze))

(define-type Exp
  (exp-number [n : Number])
  (exp-op2 [op : Op2] [e1 : Exp] [e2 : Exp])
  (exp-op1 [op : Op1] [e1 : Exp]))

(define (parse-Op2 s)
  (let ([sym (s-exp->symbol s)])
  (cond
    [(equal? sym '+) (op-add)]
    [(equal? sym '-) (op-sub)]
    [(equal? sym '*) (op-mul)]
    [(equal? sym '/) (op-div)]
    [(equal? sym '^) (op-pot)])))

(define (parse-Op1 s)
  (let ([sym (s-exp->symbol s)])
    (cond
      [(equal? sym '!) (op-sil)]
      [(equal? sym '~) (op-prze)])))

(define (parse-Exp s)
  (cond [(s-exp-number? s) (exp-number (s-exp->number s))]
        [(s-exp-list? s)
         (let [(xs (s-exp->list s))]
           (if (= 2 (length xs))
               (exp-op1 (parse-Op1 (first xs))
                        (parse-Exp (second xs)))
               (exp-op2 (parse-Op2 (first xs))
                        (parse-Exp (second xs))
                        (parse-Exp (third xs)))))]))

;potega
(define (helper a p curr)
    (if (= p 0)
        curr
        (helper a (- p 1) (* curr a))))

(define (potega x y)
  (if (> y 0)
      (helper x y 1)
      (helper (/ 1 x) (un-min y) 1)))

;silnia
(define (silnia x)
  (if (= x 0)
      1
      (* x (silnia (- x 1)))))

(define (un-min x)
  (- 0 x))

(define (eval-op2 op)
  (type-case Op2 op
    [(op-add) +]
    [(op-sub) -]
    [(op-mul) *]
    [(op-div) /]
    [(op-pot) potega]))

(define (eval-op1 op)
  (type-case Op1 op
    [(op-sil) silnia]
    [(op-prze) un-min]))

(define (eval-exp e)
  (type-case Exp e
    [(exp-number n) n]
    [(exp-op2 op e1 e2)
     ((eval-op2 op) (eval-exp e1) (eval-exp e2))]
    [(exp-op1 op e1)
     ((eval-op1 op) (eval-exp e1))]))

(define e `(~ (! (^ 2 2))))
