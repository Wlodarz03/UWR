#lang plait

;; abstract syntax -------------------------------

(define-type Op
  (add)
  (sub)
  (mul)
  (div)
  (eql)
  (leq))

(define-type Exp
  (numE [n : Number])
  (opE [op : Op]
       [l : Exp]
       [r : Exp])
  (ifE [b : Exp]
       [l : Exp]
       [r : Exp])
  (condE [cs : (Listof (Exp * Exp))])
  (carE [lst : Exp])
  (cdrE [lst : Exp])
  ;(nullE)
  (null? [lst : Exp])
  (listE [l : (Listof Exp)]))

;; parse ----------------------------------------

(define (parse [s : S-Exp]) : Exp
  (cond
    [(s-exp-match? `NUMBER s)
     (numE (s-exp->number s))]
    [(s-exp-match? `{if ANY ANY ANY} s)
     (ifE (parse (second (s-exp->list s)))
          (parse (third (s-exp->list s)))
          (parse (fourth (s-exp->list s))))]
    [(s-exp-match? `{cond ANY ...} s)
     (condE (parse-cond (rest (s-exp->list s))))]
    [(s-exp-match? `{cons ANY ANY} s)
     (listE
      (cons
       (parse (second (s-exp->list s)))
       (listE-l (parse (third (s-exp->list s))))))]
    [(s-exp-match? `{car ANY} s)
     (carE (parse (second (s-exp->list s))))]
    [(s-exp-match? `{cdr ANY} s)
     (cdrE (parse (second (s-exp->list s))))]
    [(s-exp-match? `null s)
     (listE '())]
    [(s-exp-match? `{null? ANY} s)
     (null? (parse (second (s-exp->list s))))]
    [(s-exp-match? `{list ANY ...} s)
     (listE (parse-list (rest (s-exp->list s))))]
    [(s-exp-match? `{SYMBOL ANY ANY} s)
     (opE (parse-op (s-exp->symbol (first (s-exp->list s))))
          (parse (second (s-exp->list s)))
          (parse (third (s-exp->list s))))]
    [else (error 'parse "invalid input")]))

(define (parse-cond [ss : (Listof S-Exp)]) : (Listof (Exp * Exp))
  (type-case (Listof S-Exp) ss
    [empty
     empty]
    [(cons s ss)
     (if (s-exp-match? `{ANY ANY} s)
         (cons (pair (parse (first (s-exp->list s)))
                     (parse (second (s-exp->list s))))
               (parse-cond ss))
         (error 'parse "invalid input: cond"))]))

(define (parse-list [ss : (Listof S-Exp)]) : (Listof Exp)
  (map parse ss))

(define (parse-op [op : Symbol]) : Op
  (cond
    [(eq? op '+) (add)]
    [(eq? op '-) (sub)]
    [(eq? op '*) (mul)]
    [(eq? op '/) (div)]
    [(eq? op '=) (eql)]
    [(eq? op '<=) (leq)]
    [else (error 'parse "unknown operator")]))


;; eval --------------------------------------

(define-type Value
  (numV [n : Number])
  (boolV [b : Boolean])
  (listV [elems : (Listof Value)]))

(define (op-num-num->proc [f : (Number Number -> Number)]) : (Value Value -> Value)
  (λ (v1 v2)
    (type-case Value v1
      [(numV n1)
       (type-case Value v2
         [(numV n2)
          (numV (f n1 n2))]
         [else
          (error 'eval "type error")])]
      [else
       (error 'eval "type error")])))

(define (op-num-bool->proc [f : (Number Number -> Boolean)]) : (Value Value -> Value)
  (λ (v1 v2)
    (type-case Value v1
      [(numV n1)
       (type-case Value v2
         [(numV n2)
          (boolV (f n1 n2))]
         [else
          (error 'eval "type error")])]
      [else
       (error 'eval "type error")])))

(define (op->proc [op : Op]) : (Value Value -> Value)
  (type-case Op op
    [(add) (op-num-num->proc +)]
    [(sub) (op-num-num->proc -)]
    [(mul) (op-num-num->proc *)]
    [(div) (op-num-num->proc /)]
    [(eql) (op-num-bool->proc =)]
    [(leq) (op-num-bool->proc <=)]))

(define (cond->if [cs : (Listof (Exp * Exp))]) : Exp
  (type-case (Listof (Exp * Exp)) cs
    [empty
     (numE 42)]
    [(cons c cs)
     (ifE (fst c)
          (snd c )
          (cond->if cs))]))

(define (eval [e : Exp]) : Value
  (type-case Exp e
    [(numE n) (numV n)]
    [(opE o l r) ((op->proc o) (eval l) (eval r))]
    [(ifE b l r)
     (type-case Value (eval b)
       [(boolV v)
        (if v (eval l) (eval r))]
       [else
        (error 'eval "type error")])]
    [(condE cs)
     (eval (cond->if cs))]
    [(carE lst)
     (type-case Value (eval lst)
       [(listV l)
        (if (empty? l)
            (error 'eval "empty list")
            (first l))]
       [else (error 'eval "type error")])]
    [(cdrE lst)
     (type-case Value (eval lst)
       [(listV elems)
        (if (empty? elems)
            (error 'eval "empty list")
            (listV (rest elems)))]
       [else (error 'eval "type error")])]
    ;[(nullE) (listV empty)]
    [(null? lst)
     (type-case Value (eval lst)
       [(listV elems) (boolV (empty? elems))]
       [else (error 'eval "type error")])]
    [(listE elems)
     (listV (eval-list elems))]))

(define (eval-list [elems : (Listof Exp)]) : (Listof Value)
  (map eval elems))

(define (run [e : S-Exp]) : Value
  (eval (parse e)))

#;(module+ test
  (test (run `2)
        (numV 2))
  (test (run `{+ 2 1})
        (numV 3))
  (test (run `{* 2 1})
        (numV 2))
  (test (run `{+ {* 2 3} {+ 5 8}})
        (numV 19))
  (test (run `{= 0 1})
        (boolV #f))
  (test (run `{if {= 0 1} {* 3 4} 8})
        (numV 8))
  (test (run `{cond {{= 0 1} {* 3 4}}
                    {{= 1 1} 8}})
        (numV 8))
(test (run `{null? {null}}) (boolV #t)))

(module+ test
  (test (parse `2)
        (numE 2))
  (test (parse `{+ 2 1})
        (opE (add) (numE 2) (numE 1)))
  (test (parse `{* 3 4})
        (opE (mul) (numE 3) (numE 4)))
  (test (parse `{+ {* 3 4} 8})
        (opE (add)
             (opE (mul) (numE 3) (numE 4))
             (numE 8)))
  (test (parse `{if {= 0 1} {* 3 4} 8})
        (ifE (opE (eql) (numE 0) (numE 1))
             (opE (mul) (numE 3) (numE 4))
             (numE 8)))
  (test (parse `{list})
        (listE '()))
  (test (parse `{list 1 2 3})
        (listE (list (numE 1) (numE 2) (numE 3))))
  (test (parse `{list 1 2 {+ 3 4}})
        (listE (list (numE 1) (numE 2) (opE (add) (numE 3) (numE 4)))))
  (test (parse `{cons 1 {list}})
        (listE (list (numE 1))))
  (test (parse `{cons 1 {cons {- 23 21} {cons 3 {list}}}})
        (listE (list (numE 1) (opE (sub) (numE 23) (numE 21)) (numE 3))))
  (test (parse `{car {list 1 2 3}})
        (carE (listE (list (numE 1) (numE 2) (numE 3)))))
  (test (parse `{car {list}})
        (carE (listE (list))))
  (test (parse `{cdr {list 1 2 3}})
        (cdrE (listE (list (numE 1) (numE 2) (numE 3)))))
  (test (parse `null)
        (listE (list)))
  (test (parse `{cons 1 null})
        (listE (list (numE 1)))))
