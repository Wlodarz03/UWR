#lang racket

(define-struct matrix (a b c d))

(define (matrix-mult m n)
  (make-matrix (+ (* (matrix-a m) (matrix-a n)) (* (matrix-b m) (matrix-c n)))
               (+ (* (matrix-a m) (matrix-b n)) (* (matrix-b m) (matrix-d n)))
               (+ (* (matrix-c m) (matrix-a n)) (* (matrix-d m) (matrix-c n)))
               (+ (* (matrix-c m) (matrix-b n)) (* (matrix-d m) (matrix-d n)))))

(define matrix-id (make-matrix 1 0 0 1))

(define (matrix-expt m k)
  (cond ([= k 0] matrix-id)
        ([= k 1] m)
        [else (matrix-mult m (matrix-expt m (- k 1)))]))

(define (fib-matrix k)
  (define m (make-matrix 1 1 1 0))
  (define n (matrix-expt m k))
  (matrix-b n))
      

;(matrix-a (matrix-mult (matrix 1 2 1 3) (matrix 0 1 2 3)))
;(matrix-b (matrix-mult (matrix 1 2 1 3) (matrix 0 1 2 3)))
;(matrix-c (matrix-mult (matrix 1 2 1 3) (matrix 0 1 2 3)))
;(matrix-d (matrix-mult (matrix 1 2 1 3) (matrix 0 1 2 3)))

;(matrix-a matrix-id)
;(matrix-b matrix-id)
;(matrix-c matrix-id)
;(matrix-d matrix-id)

;(matrix-a (matrix-expt (matrix 1 2 1 3) 3))
;(matrix-b (matrix-expt (matrix 1 2 1 3) 3))
;(matrix-c (matrix-expt (matrix 1 2 1 3) 3))
;(matrix-d (matrix-expt (matrix 1 2 1 3) 3))