#lang racket


(define morse-code-map '((".-" . #\a)("-..." . #\b)("-.-." . #\c)("-.." . #\d)("." . #\e)
                        ("..-." . #\f)("--." . #\g)("...." . #\h)(".." . #\i)(".---" . #\j)
                        ("-.-" . #\k)(".-.." . #\l)("--" . #\m)("-." . #\n)("---" . #\o)
                        (".--." . #\p)("--.-" . #\q)(".-." . #\r)("..." . #\s)("-" . #\t)
                        ("..-" . #\u)("...-" . #\v)(".--" . #\w)("-..-" . #\x)("-.--" . #\y)
                        ("--.." . #\z)(".----" . #\1)("..---" . #\2)("...--" . #\3)("....-" . #\4)
                        ("....." . #\5)("-...." . #\6)("--..." . #\7)("---.." . #\8)("----." . #\9)
                        ("-----" . #\0)("" . #\space)(".-.-.-" . #\.)("--..--" . #\,)("..--.." . #\?)("-.-.--" . #\!)))

(define morse "-- .--.  ..--- ----- ..--- ..---")

(define (morse->list m)
  (string-split m " "))

(define (morse->char m)
  (cdr (assoc m morse-code-map)))

(define (zmiana m)
  (map morse->char (morse->list m)))

(define (morse-decode m)
  (list->string (zmiana m)))