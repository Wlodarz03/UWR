(define (extend-more env l1 l2)
  (if (= (length l1)(length l2))
      (if (empty? l1)
          env
          (extend-more (extend-env env (first l1) (first l2)) (rest l1) (rest l2)))
      (error 'app "zla ilosc argumentow")))


(define (eval [e : Exp] [env : Env]) 
  (type-case Exp e
    [(numE n) n]
    [(varE x)
     (lookup-env x env)]
    [(opE e1 o e2)
     ((op->proc o) (eval e1 env) (eval e2 env))]
    [(ifE e0 e1 e2)
     (if (= (eval e0 env) 0)
         (eval e1 env)
         (eval e2 env))]
    [(letE x e1 e2)
     (let ([v1 (eval e1 env)])
       (eval e2 (extend-env env x v1)))]
    [(appE name args)
     (eval (first (lookup-env name env)) (extend-more env (second (lookup-env name env)) args))]))

#;(define (changevarsinexp [args : (Listof Symbol)] [e : Exp]) : Exp ;do zmiennych wolnych
  (type-case Exp e
    [(numE n) (numE n)]
    [(varE x)
     (if (not (member? x args))
         (varE (string->symbol (string-append (symbol->string x) "1")))
         (varE x))]
    [(opE e1 o e2)
     (opE (changevarsinexp args e1)
          o
          (changevarsinexp args e2))]
    [(ifE e0 e1 e2)
     (ifE (changevarsinexp args e0)
          (changevarsinexp args e1)
          (changevarsinexp args e2))]
    [(letE x e1 e2)
     (letE x
           (changevarsinexp args e1)
           (changevarsinexp args e2))]
    [(appE name argss)
     (appE name
           (map (lambda (x) (changevarsinexp args x)) argss))]))